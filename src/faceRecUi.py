# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FaceRecognition.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
# Generate by wuyuhang on 2021.04.04
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import time
import card


class Ui_MainWindow(object):
    def __init__(self):
        self.timer_camera = QtCore.QTimer()
        self.cap = cv2.VideoCapture()       
        self.camIdOrSrc = 0                     
        self.bgSrc = cv2.imread('cameraBG.png')
        self.cameraBG = QtGui.QImage(self.bgSrc.data,self.bgSrc.shape[1],self.bgSrc.shape[0],QtGui.QImage.Format_RGB888)
        self.hhuIcon = cv2.imread("hhu.png")
        self.frameCounter = 0
        self.startTime = 0
        self.endTime = 0
        self.btn1_click = 0

    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(820, 880)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(820, 880))
        MainWindow.setMaximumSize(QtCore.QSize(820, 880))
        MainWindow.setIconSize(QtCore.QSize(20, 20))
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.streamContainer = QtWidgets.QLabel(self.centralwidget)
        self.streamContainer.setGeometry(QtCore.QRect(19, 38, 581, 611))
        self.streamContainer.setPixmap(QtGui.QPixmap.fromImage(self.cameraBG))
        self.streamContainer.setObjectName("streamContainer")
        
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(620, 165, 170, 50))
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(620, 225, 170, 50))
        self.pushButton_2.setObjectName("pushButton_2")
        # self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_3.setGeometry(QtCore.QRect(620, 400, 161, 71))
        # self.pushButton_3.setObjectName("pushButton_3")
        # self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_4.setGeometry(QtCore.QRect(620, 510, 161, 71))
        # self.pushButton_4.setObjectName("pushButton_4")
        
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setEnabled(True)
        self.textBrowser.setGeometry(QtCore.QRect(20, 670, 780, 161))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        self.textBrowser.setMinimumSize(QtCore.QSize(0, 0))
        self.textBrowser.setMaximumSize(QtCore.QSize(1000, 900))
        self.textBrowser.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.textBrowser.setLineWidth(1)
        self.textBrowser.setCursorWidth(1)
        self.textBrowser.setObjectName("textBrowser")
        
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(9, 9, 771, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Adobe 黑体 Std R")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAutoFillBackground(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        # self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_5.setGeometry(QtCore.QRect(620, 580, 161, 71))
        # self.pushButton_5.setObjectName("pushButton_5")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(620, 40, 170, 110))
        self.graphicsView.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.graphicsView.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        rgbIcon = cv2.cvtColor(self.hhuIcon, cv2.COLOR_BGR2RGB)
        frame = QtGui.QImage(rgbIcon, rgbIcon.shape[1], rgbIcon.shape[0], QtGui.QImage.Format_RGB888)
        pix =  QtGui.QPixmap.fromImage(frame)
        self.item= QtWidgets.QGraphicsPixmapItem(pix)                     
        self.scene = QtWidgets.QGraphicsScene()                           
        self.scene.addItem(self.item)
        self.graphicsView.setScene(self.scene)

        self.graphicsView.setObjectName("graphicsView")
        MainWindow.setCentralWidget(self.centralwidget)
        
        # self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        # self.menubar.setObjectName("menubar")
        # self.menuTest = QtWidgets.QMenu(self.menubar)
        # self.menuTest.setObjectName("menuTest")
        # MainWindow.setMenuBar(self.menubar)
        # self.statusbar = QtWidgets.QStatusBar(MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)
        # self.actionopen = QtWidgets.QAction(MainWindow)
        # self.actionopen.setObjectName("actionopen")
        # self.actionquit = QtWidgets.QAction(MainWindow)
        # self.actionquit.setObjectName("actionquit")
        # self.menuTest.addAction(self.actionopen)
        # self.menuTest.addAction(self.actionquit)
        # self.menubar.addAction(self.menuTest.menuAction())

        # self.cardBinding(self.centralwidget)

        
        self.scroll=QtWidgets.QScrollArea(self.centralwidget)
        self.scroll.setGeometry(QtCore.QRect(620, 290, 180, 360))
        # self.scroll.setMinimumSize(170,320)
        
        self.card = QtWidgets.QVBoxLayout()
        self.cardContainer = QtWidgets.QWidget()

        #
        #
        #
        

        self.retranslateUi(MainWindow)
        self.eventBinding()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "模式识别课设"))
        self.label.setText(_translate("MainWindow", "模式识别——人脸识别"))
        self.pushButton_1.setText(_translate("MainWindow", "开始签到"))

        self.pushButton_2.setText(_translate("MainWindow", "清空签到列表"))
        # self.pushButton_3.setText(_translate("MainWindow", "btn3"))
        # self.pushButton_4.setText(_translate("MainWindow", "btn4"))


        # self.menuTest.setTitle(_translate("MainWindow", "File"))
        # self.actionopen.setText(_translate("MainWindow", "open"))
        # self.actionquit.setText(_translate("MainWindow", "quit"))

        # self.label_8.setText(_translate("MainWindow", "TextLabel"))
        # self.label_7.setText(_translate("MainWindow", "TextLabel"))
        # self.label_6.setText(_translate("MainWindow", "置信度："))
        # self.label_5.setText(_translate("MainWindow", "姓名："))
        
    def eventBinding(self):
        self.clickEvent()
        self.timeCounterEvent()
        
    def clickEvent(self):
        self.pushButton_1.clicked.connect(self.btnEvent_1) 
        self.pushButton_2.clicked.connect(self.btnEvent_2) 
        # self.pushButton_3.clicked.connect(self.btnEvent_3) 
        # self.pushButton_4.clicked.connect(self.btnEvent_4) 
    
    def timeCounterEvent(self):
        frameCounter = 0
        self.timer_camera.timeout.connect(self.show_camera)

    def btnEvent_1(self):
        self.btn1_click = self.btn1_click + 1
        # self.importStream()
    def btnEvent_2(self):
        # img = cv2.imread('hhu.png')
        # self.cardAdd('吴芋航', '99%', img)
        self.clearCardContainer()
        print("btn2 clicked")
    def btnEvent_3(self):
        print("btn3 clicked")
    def btnEvent_4(self):
        print("btn4 clicked")
    def btnEvent_5(self):
        print("btn5 clicked")

    def setStreamSrc(self, path_or_camIdOrSrc):
        self.camIdOrSrc = path_or_camIdOrSrc
        
    def importStream(self):
        if self.timer_camera.isActive() == False:  
            flag = self.cap.open(self.camIdOrSrc) 
            if flag == False:     
                self.textBrowser.append("错误，请检查相机是否正常或视频文件是否损坏")
            else:
                self.timer_camera.start(30)  
                self.textBrowser.append("已经打开相机！")
                self.textBrowser.append("开始计时！")
                self.startTime = time.clock()
                self.pushButton_1.setText("关闭相机")
        else:
            self.timer_camera.stop()  
            self.cap.release()        
            self.streamContainer.clear()  
            self.textBrowser.append("已经关闭相机！")
            self.textBrowser.append("结束计时！")
            self.endTime = time.clock()
            self.textBrowser.append("用时" + str(int(self.endTime - self.startTime)) + "秒, 平均每秒" + str(int(self.frameCounter/(self.endTime - self.startTime))) + "帧")
            self.streamContainer.setPixmap(QtGui.QPixmap.fromImage(self.cameraBG))
            self.pushButton_1.setText("打开相机")
        
    def show_camera(self):
        self.frameCounter = self.frameCounter + 1
        flag,self.image = self.cap.read()
        show = cv2.resize(self.image,(640,600)) 
            
        show = cv2.cvtColor(show,cv2.COLOR_BGR2RGB) 
        showImage = QtGui.QImage(show.data,show.shape[1],show.shape[0],QtGui.QImage.Format_RGB888) 
        self.streamContainer.setPixmap(QtGui.QPixmap.fromImage(showImage))  
    

    def cardAdd(self, number ,name, conf, img):
        self.cardContainer=QtWidgets.QWidget()
        self.card.addWidget(card.myCard(number,name, conf, img))
        self.cardContainer.setLayout(self.card)
        self.scroll.setWidget(self.cardContainer)
    
    def clearCardContainer(self):
        self.cardContainer=QtWidgets.QWidget()
        self.card = QtWidgets.QVBoxLayout()
        self.cardContainer.setLayout(self.card)
        self.scroll.setWidget(self.cardContainer)

    def updateStreamSrc(self, img):
        show = cv2.resize(img,(640,600))
        show = cv2.cvtColor(show,cv2.COLOR_BGR2RGB) 
        showImage = QtGui.QImage(show.data,show.shape[1],show.shape[0],QtGui.QImage.Format_RGB888) 
        self.streamContainer.setPixmap(QtGui.QPixmap.fromImage(showImage))  
        
